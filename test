provider "aws" {
  region = var.region
}

# EventBridge rule to capture SFTP events
resource "aws_eventbridge_rule" "sftp_event_rule" {
  name = "sftp_event_rule"
  event_pattern = jsonencode({
    "source": ["aws.transfer"],
    "detail-type": [
      "SFTP Connector File Send Completed",
      "SFTP Connector File Send Failed"
    ]
  })
}

# SQS queue to store SFTP events
resource "aws_sqs_queue" "sftp_event_queue" {
  name = "sftp_event_queue"
}

# Lambda function to process SFTP events
resource "aws_lambda_function" "sftp_event_processor" {
  filename         = var.lambda_zip_file
  function_name    = "sftp_event_processor"
  role             = aws_iam_role.lambda_exec.arn
  handler          = "lambda_function.lambda_handler"
  runtime          = "python3.9"
  source_code_hash = filebase64sha256(var.lambda_zip_file)
}

# Permission for EventBridge to invoke Lambda
resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.sftp_event_processor.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_eventbridge_rule.sftp_event_rule.arn
}

# EventBridge target to send events to Lambda
resource "aws_eventbridge_target" "sftp_event_target" {
  rule = aws_eventbridge_rule.sftp_event_rule.name
  arn  = aws_lambda_function.sftp_event_processor.arn
}

# DynamoDB table to store SFTP transfer status
resource "aws_dynamodb_table" "sftp_status_table" {
  name           = "sftp_status_table"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "transfer_id"
  attribute {
    name = "transfer_id"
    type = "S"
  }
}

# IAM role for Lambda execution
resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# IAM policy for Lambda execution
resource "aws_iam_role_policy" "lambda_exec_policy" {
  name = "lambda_exec_policy"
  role = aws_iam_role.lambda_exec.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "dynamodb:PutItem",
          "dynamodb:UpdateItem"
        ]
        Effect = "Allow"
        Resource = aws_dynamodb_table.sftp_status_table.arn
      },
      {
        Action = "sqs:ReceiveMessage",
        Effect = "Allow"
        Resource = aws_sqs_queue.sftp_event_queue.arn
      }
    ]
  })
}
modules/sftp_transfer/variables.tf
variable "region" {
  description = "AWS region"
  type        = string
}

variable "lambda_zip_file" {
  description = "Path to the Lambda zip file"
  type        = string
}
modules/sftp_transfer/outputs.tf
output "sqs_queue_url" {
  value = aws_sqs_queue.sftp_event_queue.url
}

output "dynamodb_table_name" {
  value = aws_dynamodb_table.sftp_status_table.name
}
Wywołanie modułu w main.tf
provider "aws" {
  region = "us-west-2"
}

module "sftp_transfer" {
  source          = "./modules/sftp_transfer"
  region          = "us-west-2"
  lambda_zip_file = "lambda_function_payload.zip"
}

output "sqs_queue_url" {
  value = module.sftp_transfer.sqs_queue_url
}

output "dynamodb_table_name" {
  value = module.sftp_transfer.dynamodb_table_name
}
